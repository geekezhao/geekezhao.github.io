<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Geeke&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zqzhao.cn/"/>
  <updated>2020-04-17T18:41:53.366Z</updated>
  <id>https://zqzhao.cn/</id>
  
  <author>
    <name>Geek ZHAO</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NK-model</title>
    <link href="https://zqzhao.cn/2020/04/17/nk-model/"/>
    <id>https://zqzhao.cn/2020/04/17/nk-model/</id>
    <published>2020-04-17T12:47:35.000Z</published>
    <updated>2020-04-17T18:41:53.366Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>McCarthy, I. P., &amp; Tan, Y. K. (2000). Manufacturing competitiveness and fitness landscape theory. <em>Journal of Materials Processing Technology</em>, 107(1-3), 347-352.</p><p>Esteve Almirall, Ramon Casadesus-Masanell. (2010). Open Versus Closed Innovation: A Model of Discovery and Divergence. <em>Academy of Management Review</em>, Vol. 35, No. 1, 27–47.</p><p><a href="http://blog.sina.com.cn/s/blog_53914e220100o6lj.html" target="_blank" rel="noopener">Sina Blog: 研究工具 - NK MODEL</a></p></blockquote><p>本文参考了上述材料以及人大经管论坛，现简要陈述NK MODEL如下。非常凑巧的是，这篇博客中的引文是AMR的这篇，正好是本周管理系统模块的选读论文。因此作为NK MODEL的入门文章，应当以此举例。</p><h3 id="Link-between-NK-Model-and-FLT"><a href="#Link-between-NK-Model-and-FLT" class="headerlink" title="Link between NK-Model and FLT"></a>Link between NK-Model and FLT</h3><p><strong>NK Model脱胎于Fitness Landscape Theory。</strong></p><blockquote><p><strong>What is Fitness Landscape Theory?</strong></p><p>Fitness Landscape Theory类似于生态学中生态位的概念</p><ul><li>对于某一物种而言，不同资源组合会形成适应度不同的环境</li><li>在诸多环境中，有几种bundle会特别适合这一物种，称为生态位（此处可以参考经济学中“预算束”的概念）</li><li>以资源建立空间坐标系（若有k个资源，即有k维空间），适应度在这一空间内应当形成类似于GMM图像的分布，即Fitness Landscape</li></ul></blockquote><p><strong>NK模型研究适用于处理系统内部要素的相互作用关系对系统的整体适应性的问题。</strong>由于系统存在复杂性，实证研究无法直接研究各要素间的相互关系以及各要素对系统整体的影响，此时NK模型提供一个间接、简洁、有效的手段对系统进行仿真。</p><p><strong>NK模型的理解可以遵循基因型与表型的对应理解。</strong>（Kauffman）对应到上述Fitness Landscape Theory，基因型（genotype）的不同组合在此处对应着Fitness Landscape Theory中对资源的不同组合，表型（phenotype）的不同组合在此处对应系统最终的状态。系统的进化，或者说最优解，其实就是生物进化中的最终形态（在自然选择中当前总是保持最适）。NK MODEL本质上是一个进化算法。</p><p>基因之间存在交互作用，改变一个基因型并不意味着改变了单一表型而是对整体产生了影响，甚至影响的正面负面也会受到其他基因的调控。这种条件之间的<strong>Trade-off即NK模型的研究中心</strong>。</p><h3 id="NK-Model"><a href="#NK-Model" class="headerlink" title="NK-Model"></a>NK-Model</h3><blockquote><p>NK-Model将复杂系统描述为一个由N个元素构成的系统，其中每个元素i都有各自的等位基因。例如$A_i=3$即为第i个元素有3个等位基因。现在我们为每个元素，从其等位基因集合中选出一个基因，则有Feature Vector$<s_1, s_2, ..., s_N>$，那么这个Vector即通过限定特征对应了某一System。</p></blockquote><p>在(Almirall, Casadesus-Masanell, 2010)中，将一个完整的System（在文中Syestem即某一Product）均分为2 Subsystem，所以有$&lt;\alpha, \beta&gt; = <s_1, s_2, ..., s_N> = <s_1, s_2, ..., s_{N/2};s_{N/2 + 1}, ..., s_N>$。</p><blockquote><p>至此已经解释了NK模型中“N”的含义，最后为“N”Part作结，我们引入系统的设计空间的概念。系统的设计空间（Design Space）即由N个feature组成的N维概率空间。空间的具体大小为$\Pi_{i=1}^{N}A_i$，也就是组合数。</p></blockquote><p>在(Almirall, Casadesus-Masanell, 2010)中，为了计算方便起见，每个Feature仅有2个等位基因，即设计空间大小为$2^N$。</p><blockquote><p>现在我们要解释K的作用。K衡量的是元素间的interaction，即该系统中每个元素i都与k个其他元素进行交互，即系统复杂度。</p></blockquote><p>在(Almirall, Casadesus-Masanell, 2010)中，对这一部分的描述原文摘录如下：</p><p>There are $2^N$ possible product configurations. The contribution $c_i$ of each product feature $s_i$ to willingness to pay dependents on other K components. For each of $2^K$ possible combinations, a value is drawn from a uniform probability distribution on [0, 1]. The overall willingness to pay associated with $<s_1, s_2, ..., s_N>$ is the average over the N value contributions,</p><script type="math/tex; mode=display">WTP(s_1, s_2, ..., s_N) = \dfrac{\sum_{i=1}^{N}c_i(s_i; s_{i_1}, s_{i_2}, ..., s_{s_k})}{N}</script><p>Where $s_{i_j}$, $j={1, …, k}$ are the configurations of the K features with which $s_i$ interacts. We assume random assignment of dependencies($i_j$ are determined randomly in the model).</p><h1 id="文章的细节还没看完有待补充，NK模型已经解释完毕。"><a href="#文章的细节还没看完有待补充，NK模型已经解释完毕。" class="headerlink" title="文章的细节还没看完有待补充，NK模型已经解释完毕。"></a>文章的细节还没看完有待补充，NK模型已经解释完毕。</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;McCarthy, I. P., &amp;amp; Tan, Y. K. (2000). Manufacturing competitiveness and fitness landscape theory. &lt;em&gt;Journal of Materia
      
    
    </summary>
    
    
      <category term="Theory" scheme="https://zqzhao.cn/categories/Theory/"/>
    
    
      <category term="Theorical_Basis" scheme="https://zqzhao.cn/tags/Theorical-Basis/"/>
    
  </entry>
  
  <entry>
    <title>MISQ Research Curation on IS Use</title>
    <link href="https://zqzhao.cn/2020/04/05/Burton-summary/"/>
    <id>https://zqzhao.cn/2020/04/05/Burton-summary/</id>
    <published>2020-04-05T08:28:07.000Z</published>
    <updated>2020-04-17T12:48:09.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Burton-Jones, A., Stein, M., Mishra, A. “IS Use,” in MIS Quarterly Research Curations, Ashley Bush and Arun Rai, Eds., <a href="http://misq.org/research-curations" target="_blank" rel="noopener">http://misq.org/research-curations</a>,  December 1, 2017.MIS Quarterly Articles on IS Use</p></blockquote><p><a href="/files/Burton2017.pdf">Files here.</a></p><p>This article is primarily an overview of the research content and the research methods used in IS use related article.</p><p>Now, I’ll briefly summarize the article and give my comments.</p><h2 id="Focus-of-the-Research-Curation"><a href="#Focus-of-the-Research-Curation" class="headerlink" title="Focus of the Research Curation"></a>Focus of the Research Curation</h2><p>This part introduce how they retrieve the previous article and determine the rim of dataset, actually “Paper Set” here. The standards is full of manipulation.</p><p>The main procedure is shown as follow:</p><ol><li>Segment all the article based on the publish year: 1977-1999, 2000-</li><li>Determine the search term also based on the publish year</li><li>Exclude articles focused PURELY on users’ intentions, attitudes, behaviors etc. </li><li>Exclude articles focused on misuse, abuse and addiction.</li></ol><p>The author also mention that they include or exclude an article based on their “collective judgement”.</p><h2 id="Progression-of-Research-in-MISQ"><a href="#Progression-of-Research-in-MISQ" class="headerlink" title="Progression of Research in MISQ"></a>Progression of Research in MISQ</h2><p>This part summarize the revolutionary change and evolutionary change in IS use. </p><p>One steady topic is the importance and the complexity of the IS use. This theme gradually develops since 1977 and still thrive nowadays. However, the sophistication in term measurement and theoretical basis allow researchers to discuss an old terminology in new context. (The article refer to which as the theoretical and empirical research.) </p><blockquote><p>“They can account for it with theories and methods that are sensitive to longitudinal, multilevel, and multifactorial contexts rather than reducing the reality of IS use into cross-sectional, single-level, and single-theory thinking.”</p></blockquote><p>About 2000, a novel branch of IS acceptance appears, which is due to the broken burble economy of Internet. I think it also devotes to the separation of the publish period.</p><h2 id="Thematic-Advances-in-Knowledge"><a href="#Thematic-Advances-in-Knowledge" class="headerlink" title="Thematic Advances in Knowledge"></a>Thematic Advances in Knowledge</h2><p>Four major thematic advances are mentioned here.</p><ol><li>Application, refinement, and integrations of various social psychological explanations of It acceptance.</li><li>Development of theories to account for the dynamics of use.</li><li>Richer measurement and methodological approaches</li><li>Continuing expansion of the broader network of constructs.</li></ol><h2 id="My-Comments"><a href="#My-Comments" class="headerlink" title="My Comments"></a>My Comments</h2><p>When looking into the appendix, we find out that in early age of IT use, most of researchers use conceptual framework or qualitative methods while in later period they turn to quantitative methods.</p><p>My question is :</p><ol><li>Could the quantitative methods help to clarify or refine the concepts? If so, how? Quantitative methods rely on theoretical basis to consolidate its validity, how can they help to refine the concept?</li><li>Will the concept or the definition of IT use augment in future? If so, we still need to focus on qualitative methods.</li><li>Mixed methods research gains its popularity in recent years. What is the exact definition mixed methods research? A SEM combines both qualitative data and quantitative data? Or a three-stage research including qualitative case helps refining the framework and a quantitative method validate the hypothesis? </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Burton-Jones, A., Stein, M., Mishra, A. “IS Use,” in MIS Quarterly Research Curations, Ashley Bush and Arun Rai, Eds., &lt;a hr
      
    
    </summary>
    
    
      <category term="Theory" scheme="https://zqzhao.cn/categories/Theory/"/>
    
    
      <category term="MIS_thinking" scheme="https://zqzhao.cn/tags/MIS-thinking/"/>
    
  </entry>
  
  <entry>
    <title>Formative Construct and Reflective Construct</title>
    <link href="https://zqzhao.cn/2020/04/05/construct/"/>
    <id>https://zqzhao.cn/2020/04/05/construct/</id>
    <published>2020-04-05T03:41:10.000Z</published>
    <updated>2020-04-17T12:48:03.670Z</updated>
    
    <content type="html"><![CDATA[<p>Reading Materials:</p><ul><li>MISQ  <ul><li><a href="/files/1MacKenzie.pdf">1MacKenzie.pdf</a></li><li><a href="/files/2REVISITING_BIAS.pdf">2REVISITING_BIAS</a></li><li><a href="/files/3CRITICAL_IMPORTANCE.pdf">3CRITICAL_IMPORTANCE</a></li><li><a href="/files/4NEGATIVE_CONSEQUENCES.pdf">4NEGATIVE_CONSEQUENCES</a></li><li><a href="/files/5PLS-SEM.pdf">5PLS-SEM</a></li></ul></li><li>Detmar Straub<ul><li><a href="/files/UVAformative.ppt">Speech notes</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Reading Materials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MISQ  &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/files/1MacKenzie.pdf&quot;&gt;1MacKenzie.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/files/2REVISITING_BI
      
    
    </summary>
    
    
      <category term="Theory" scheme="https://zqzhao.cn/categories/Theory/"/>
    
    
      <category term="Theorical_Basis" scheme="https://zqzhao.cn/tags/Theorical-Basis/"/>
    
  </entry>
  
  <entry>
    <title>GMM</title>
    <link href="https://zqzhao.cn/2020/03/31/GMM/"/>
    <id>https://zqzhao.cn/2020/03/31/GMM/</id>
    <published>2020-03-31T04:02:31.000Z</published>
    <updated>2020-04-05T08:39:14.272Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="CS_Math" scheme="https://zqzhao.cn/tags/CS-Math/"/>
    
  </entry>
  
  <entry>
    <title>SVD</title>
    <link href="https://zqzhao.cn/2020/03/18/SVD/"/>
    <id>https://zqzhao.cn/2020/03/18/SVD/</id>
    <published>2020-03-18T10:05:32.000Z</published>
    <updated>2020-04-05T08:39:23.078Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="CS_Math" scheme="https://zqzhao.cn/tags/CS-Math/"/>
    
  </entry>
  
  <entry>
    <title>News Clustering by Title</title>
    <link href="https://zqzhao.cn/2018/03/13/news-clustering/"/>
    <id>https://zqzhao.cn/2018/03/13/news-clustering/</id>
    <published>2018-03-13T04:13:06.000Z</published>
    <updated>2020-04-05T09:14:15.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-Thinking"><a href="#0-Thinking" class="headerlink" title="0. Thinking"></a>0. Thinking</h2><h3 id="0-1-Word-List-Selection"><a href="#0-1-Word-List-Selection" class="headerlink" title="0.1 Word List Selection"></a>0.1 Word List Selection</h3><p>Custom word list and divid into two layers by category, summed as final eigenvalues, if there are multiple eigenvalues in the same layer then averaged(although this leads to inaccurate classification, eigenvalues tend to be closer).</p><ul><li>First.txt<ul><li>Used to categorize the main categories, including philosophy, awards and conference activities, research, promotion</li><li>Each category starts with a whole hundred and the remaining spaces are replaced by “/n”</li><li>Using the dictionary sequence number *1000000 as an eigenvalue</li></ul></li></ul><ul><li>Second.txt<ul><li>Used to classify sub-categories, including faculties, national regions, international regions, international organizations</li><li>Each category starts with a whole hundred and the remaining spaces are replaced by “/n”</li><li>Using the dictionary serial number *1000 as an eigenvalue</li></ul></li></ul><h3 id="0-2-Adjustment-in-K-means"><a href="#0-2-Adjustment-in-K-means" class="headerlink" title="0.2 Adjustment in K-means"></a>0.2 Adjustment in K-means</h3><p>When selecting equal spacing selection or random selection, the final result will lead to unevenness in some classes, so select the starting centroid according to a given list, the list has 10 elements, the selected k-value is less than or equal to 10, then selected in the list; the selected k-value is greater than 10, more than 10 parts of the overall medium spacing selection.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list &#x3D; [50000000, 150000000, 250000000, 350000000, 450000000, 50000, 150000, 250000, 350000, 450000]</span><br></pre></td></tr></table></figure><h3 id="0-3-Text-Processing"><a href="#0-3-Text-Processing" class="headerlink" title="0.3 Text Processing"></a>0.3 Text Processing</h3><ul><li>Use regular matching to remove punctuation after source text is entered</li><li>The dictionary is re-ordered according to python’s built-in sort function, because we also need to find a feature word belongs to the original feature word class in reverse, so select the new dictionary, including both the feature word and the original serial number (dictionary’s subscript serial number expresses the current new serial number, the new serial number is easy to find half)</li></ul><h2 id="1-Input"><a href="#1-Input" class="headerlink" title="1. Input"></a>1. Input</h2><h3 id="1-1-Crawler"><a href="#1-1-Crawler" class="headerlink" title="1.1 Crawler"></a>1.1 Crawler</h3><p>First we crawled 3000+ news headlines on the home page of Zhejiang University.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">__author__ &#x3D; &#39;Zhao&#39;</span><br><span class="line"></span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">sName &#x3D; &quot;new.txt&quot;</span><br><span class="line">f &#x3D; open(sName, &#39;w+&#39;)</span><br><span class="line"></span><br><span class="line">for i in range(1,188):</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;www.zju.edu.cn&#x2F;xw&#x2F;list&quot; + str(i) + &quot;.htm&quot;</span><br><span class="line">    </span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;User-Agent&#39;:&quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;59.0.3071.115 Safari&#x2F;537.36&quot;,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    r &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">    r.encoding&#x3D;&#39;utf-8&#39;</span><br><span class="line">    demo &#x3D; r.text</span><br><span class="line">    soup &#x3D; BeautifulSoup(demo,&#39;html.parser&#39;)</span><br><span class="line">    # print(&quot;**********************&quot;)</span><br><span class="line"></span><br><span class="line">    for result in soup.find_all(&quot;ul&quot;, &quot;news&quot;):</span><br><span class="line">        m&#x3D;result.get_text()</span><br><span class="line">        # print(m)</span><br><span class="line">        f.write(m)</span><br><span class="line">    print(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="1-2-Regularization"><a href="#1-2-Regularization" class="headerlink" title="1.2 Regularization"></a>1.2 Regularization</h3><p>Then regularize to get the title list - this step is relatively simple, just call the <code>re</code> module and leave the code alone here. (Actually, I realized I didn’t save this code…)</p><h3 id="1-3-Word-List"><a href="#1-3-Word-List" class="headerlink" title="1.3 Word List"></a>1.3 Word List</h3><p>When creating the word list, I chose to double match, that is, first assign a value to each title according to the main keyword, which is larger, and then delete the value according to the secondary keyword. Since the end is abstracted to digital clustering, this works relatively well. (Of course, the results weren’t actually that great.)</p><!--*具体文件稍后传到码云 现在服务器有点卡*--><h2 id="2-Clustering"><a href="#2-Clustering" class="headerlink" title="2. Clustering"></a>2. Clustering</h2><p>Here I’ve been lazily using the previous participle algorithm… That algorithm is not very accurate. Of course, it has no effect on the small jobs…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">__author__ &#x3D; &#39;Zhao&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 浙江大学新闻网的list进行相似度计算，并且进行k-means聚类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import operator</span><br><span class="line">import re</span><br><span class="line">import math</span><br><span class="line">from decimal import getcontext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># import comp_char from cnsort</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path &#x3D; &#39;lib&#x2F;&#39;</span><br><span class="line">fp &#x3D; open(path + &#39;First.txt&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">ori &#x3D; fp.readlines()</span><br><span class="line"># ori is the list with out any operation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">copy &#x3D; []</span><br><span class="line">new_list &#x3D; []</span><br><span class="line">for x in ori:</span><br><span class="line">    x &#x3D; re.sub(r&#39;\n&#39;, &#39;&#39;, x)</span><br><span class="line">    copy.append(x)</span><br><span class="line">    new_list.append(x)</span><br><span class="line"># in this part we change the format in a into standard format and save as copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fp.close()</span><br><span class="line"># we close the file, then we can run the list totally in this program</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">copy.sort()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id &#x3D; 0</span><br><span class="line">dictionary &#x3D; []</span><br><span class="line">for element in copy:</span><br><span class="line">    if element !&#x3D; &#39;&#39;:</span><br><span class="line">        dictionary.append([])</span><br><span class="line">        dictionary[id].append(element)</span><br><span class="line">        for ele in new_list:</span><br><span class="line">            if ele &#x3D;&#x3D; element and len(dictionary[id]) &lt; 2:</span><br><span class="line">                dictionary[id].append(new_list.index(ele))</span><br><span class="line">        id +&#x3D; 1</span><br><span class="line"># using new list to substitute original dictionary which contains lots of &#39;&#39; (it&#39;s hard to visualize.)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id &#x3D; 0</span><br><span class="line">for element in dictionary:</span><br><span class="line">    print(id, &quot; &quot;, element, end&#x3D;&quot; &#x2F; &quot;)</span><br><span class="line">    print(&quot; &quot;, copy[id])</span><br><span class="line">    id +&#x3D; 1</span><br><span class="line">print(&quot;----------&quot;)</span><br><span class="line">path &#x3D; &#39;scrapy&#x2F;&#39;</span><br><span class="line">f &#x3D; open(path + &#39;ori_news.txt&#39;)</span><br><span class="line">ori &#x3D; f.readlines()</span><br><span class="line"># ori is the list with out any operation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text &#x3D; []</span><br><span class="line">for x in ori:</span><br><span class="line">    x &#x3D; re.sub(r&#39;\n&#39;, &#39;&#39;, x)</span><br><span class="line">    text.append(x)</span><br><span class="line"># in this part we change the format in a into standard format and save as copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fp.close()</span><br><span class="line"># we close the file, then we can run the list totally in this program</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------- upper is reading part including wordlist and text -------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index &#x3D; []</span><br><span class="line">for x in ori:</span><br><span class="line">    index.append([])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------- upper is append a vacant list prepared to insert index -------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for str_input in text:</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;,&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;，&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;\.&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;。&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;——&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;……&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;！&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;!&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;\?&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;？&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;;&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;；&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39; &#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;&#x2F;&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;、&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;&quot;&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;\&#39;&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;&lt;&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;&gt;&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;《&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;》&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;\(&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;\)&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;（&#39;, &quot;&quot;, str_input)</span><br><span class="line">    str_input &#x3D; re.sub(r&#39;）&#39;, &quot;&quot;, str_input)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # change all the punctuation as blank, however, we may split falsely.</span><br><span class="line">    # Words get around, the step can also split at wrong place, so, I do not fix this mistake.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------- upper is transforming part -------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">temp_text &#x3D; -1</span><br><span class="line">for str_input in text:</span><br><span class="line">    temp_text +&#x3D; 1</span><br><span class="line">    str_head &#x3D; 0</span><br><span class="line">    str_tail &#x3D; len(str_input)</span><br><span class="line">    ptr &#x3D; 5</span><br><span class="line">    temp &#x3D; 0  # 当前处理字段起始位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # result &#x3D; []</span><br><span class="line">    # ch_index &#x3D; []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    exact_num &#x3D; 0</span><br><span class="line">    # we sort dictionary(the copy) in this program and each word has two characteristic number</span><br><span class="line">    # using as index to look back on original dictionary</span><br><span class="line">    while temp &lt; str_tail - 1:</span><br><span class="line">        flag &#x3D; 0</span><br><span class="line">        ptr &#x3D; 5</span><br><span class="line">        while flag !&#x3D; 1:</span><br><span class="line">            in_put &#x3D; str_input[temp:temp + ptr]  # 当前处理字段</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            tail &#x3D; len(dictionary) - 1</span><br><span class="line">            head &#x3D; 0</span><br><span class="line">            half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            while tail !&#x3D; half and head !&#x3D; half:</span><br><span class="line">                if operator.lt(dictionary[half][0], in_put):</span><br><span class="line">                    # 如果字符组的一半比input小</span><br><span class="line">                    head &#x3D; half</span><br><span class="line">                    half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                elif operator.gt(dictionary[half][0], in_put):</span><br><span class="line">                    # 如果字符组的一半比input大</span><br><span class="line">                    tail &#x3D; half</span><br><span class="line">                    half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                elif operator.eq(dictionary[half][0], in_put):</span><br><span class="line">                    flag &#x3D; 1</span><br><span class="line">                    temp +&#x3D; len(in_put)</span><br><span class="line">                    if tail !&#x3D; 11 and in_put !&#x3D; &quot;&quot;:</span><br><span class="line">                        try:</span><br><span class="line">                            exact_num &#x3D; dictionary[half][1]</span><br><span class="line">                        except:</span><br><span class="line">                            print(half)</span><br><span class="line">                        # print(&quot;exact_num &#x3D; &quot;,exact_num)</span><br><span class="line">                        index[temp_text].append(exact_num * 1000000)</span><br><span class="line">                        # index[temp_text].append(half) # 这个语句仅用于调试之后的Part A部分</span><br><span class="line">                    break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if ptr &#x3D;&#x3D; 0 and temp &lt;&#x3D; len(str_input) - 1:</span><br><span class="line">                # print(str_input[temp], end&#x3D;&#39;&#x2F;&#39;)</span><br><span class="line">                # result.append(str_input[temp])</span><br><span class="line">                # ch_index.append(-1)</span><br><span class="line">                temp +&#x3D; 1</span><br><span class="line">                flag &#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if flag &#x3D;&#x3D; 0:</span><br><span class="line">                ptr -&#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # ------ Part A 仅用于调试变量 具体用于探测特征变量 ------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # print(text[temp_text])</span><br><span class="line">    # for element in index[temp_text]:</span><br><span class="line">    #     print(element,end&#x3D;&quot; &quot;)</span><br><span class="line">    #     # print(dictionary[element])</span><br><span class="line">    # print(&quot;&quot;)</span><br><span class="line">    # # print(index[temp_text])</span><br><span class="line">    # print(&quot;------------------------------&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # ------ Part A END ------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if len(index[temp_text]) &gt; 1:</span><br><span class="line">        sum &#x3D; 0</span><br><span class="line">        for element in index[temp_text]:</span><br><span class="line">            sum +&#x3D; element</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        average &#x3D; sum &#x2F; len(index[temp_text])</span><br><span class="line">        index[temp_text] &#x3D; []</span><br><span class="line">        index[temp_text].append(int(average))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # ------ Part B 仅用于调试变量 具体用于探测特征变量 ------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # print(text[temp_text])</span><br><span class="line">        # print(index[temp_text])</span><br><span class="line">        # print(&quot;-------------&quot;)</span><br><span class="line">        # ------ Part B END ------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------ Upper is first array for the title (the main class) ------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path &#x3D; &#39;lib&#x2F;&#39;</span><br><span class="line">fp &#x3D; open(path + &#39;Second.txt&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">ori &#x3D; fp.readlines()</span><br><span class="line"># ori is the list with out any operation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">copy &#x3D; []</span><br><span class="line">new_list &#x3D; []</span><br><span class="line">for x in ori:</span><br><span class="line">    x &#x3D; re.sub(r&#39;\n&#39;, &#39;&#39;, x)</span><br><span class="line">    copy.append(x)</span><br><span class="line">    new_list.append(x)</span><br><span class="line"># in this part we change the format in a into standard format and save as copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fp.close()</span><br><span class="line"># we close the file, then we can run the list totally in this program</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">copy.sort()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id &#x3D; 0</span><br><span class="line">dictionary &#x3D; []</span><br><span class="line">for element in copy:</span><br><span class="line">    if element !&#x3D; &#39;&#39;:</span><br><span class="line">        dictionary.append([])</span><br><span class="line">        dictionary[id].append(element)</span><br><span class="line">        for ele in new_list:</span><br><span class="line">            if ele &#x3D;&#x3D; element and len(dictionary[id]) &lt; 2:</span><br><span class="line">                dictionary[id].append(new_list.index(ele))</span><br><span class="line">        id +&#x3D; 1</span><br><span class="line"># using new list to substitute original dictionary which contains lots of &#39;&#39; (it&#39;s hard to visualize.)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id &#x3D; 0</span><br><span class="line">for element in dictionary:</span><br><span class="line">    print(id, &quot; &quot;, element, end&#x3D;&quot; &#x2F; &quot;)</span><br><span class="line">    print(&quot; &quot;, copy[id])</span><br><span class="line">    id +&#x3D; 1</span><br><span class="line">print(&quot;----------&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------- upper is reading part including the second wordlist -------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">temp_text &#x3D; -1</span><br><span class="line">for str_input in text:</span><br><span class="line">    temp_text +&#x3D; 1</span><br><span class="line">    # str_head &#x3D; 0</span><br><span class="line">    str_tail &#x3D; len(str_input)</span><br><span class="line">    ptr &#x3D; 5</span><br><span class="line">    temp &#x3D; 0  # 当前处理字段起始位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    while temp &lt; str_tail - 1:</span><br><span class="line">        flag &#x3D; 0</span><br><span class="line">        ptr &#x3D; 5</span><br><span class="line">        while flag !&#x3D; 1:</span><br><span class="line">            in_put &#x3D; str_input[temp:temp + ptr]  # 当前处理字段</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            tail &#x3D; len(dictionary) - 1</span><br><span class="line">            head &#x3D; 0</span><br><span class="line">            half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            while tail !&#x3D; half and head !&#x3D; half:</span><br><span class="line">                if operator.lt(dictionary[half][0], in_put):</span><br><span class="line">                    # 如果字符组的一半比input小</span><br><span class="line">                    head &#x3D; half</span><br><span class="line">                    half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                elif operator.gt(dictionary[half][0], in_put):</span><br><span class="line">                    # 如果字符组的一半比input大</span><br><span class="line">                    tail &#x3D; half</span><br><span class="line">                    half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                elif operator.eq(dictionary[half][0], in_put):</span><br><span class="line">                    flag &#x3D; 1</span><br><span class="line">                    temp +&#x3D; len(in_put)</span><br><span class="line">                    if tail !&#x3D; 11 and in_put !&#x3D; &quot;&quot;:</span><br><span class="line">                        try:</span><br><span class="line">                            exact_num &#x3D; dictionary[half][1]</span><br><span class="line">                        except:</span><br><span class="line">                            print(half)</span><br><span class="line">                        index[temp_text].append(exact_num * 1000)</span><br><span class="line">                        # index[temp_text].append(half) # 这个语句仅用于调试之后的Part A部分</span><br><span class="line">                    break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if ptr &#x3D;&#x3D; 0 and temp &lt;&#x3D; len(str_input) - 1:</span><br><span class="line">                temp +&#x3D; 1</span><br><span class="line">                flag &#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if flag &#x3D;&#x3D; 0:</span><br><span class="line">                ptr -&#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # ------ Part A 仅用于调试变量 具体用于探测特征变量 ------</span><br><span class="line">    # print(text[temp_text])</span><br><span class="line">    # for element in index[temp_text]:</span><br><span class="line">    #     print(element,end&#x3D;&quot; &quot;)</span><br><span class="line">    #     # print(dictionary[element])</span><br><span class="line">    # print(&quot;&quot;)</span><br><span class="line">    # # print(index[temp_text])</span><br><span class="line">    # print(&quot;------------------------------&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # ------ Part A END ------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if len(index[temp_text]) &gt; 1:</span><br><span class="line">        sum &#x3D; 0</span><br><span class="line">        for i in range(1, len(index[temp_text])):</span><br><span class="line">            sum +&#x3D; index[temp_text][i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        average &#x3D; sum &#x2F; len(index[temp_text])</span><br><span class="line">        average +&#x3D; index[temp_text][0]</span><br><span class="line">        index[temp_text] &#x3D; []</span><br><span class="line">        index[temp_text].append(int(average))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # ------ Part B 仅用于调试变量 具体用于探测特征变量 ------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # print(text[temp_text])</span><br><span class="line">        # print(index[temp_text])</span><br><span class="line">        # print(&quot;-------------&quot;)</span><br><span class="line">        # ------ Part B END ------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------ Upper is second array for the title (the second class) ------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for element in index:</span><br><span class="line">    if element &#x3D;&#x3D; []:</span><br><span class="line">        element.append(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------ 如果仍然没有结果 那么用0替代这个分组 --------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list &#x3D; [50000000, 150000000, 250000000, 350000000, 450000000, 50000, 150000, 250000, 350000, 450000]</span><br><span class="line"># ------------ Start Clustering -------------</span><br><span class="line">getcontext().prec &#x3D; 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k &#x3D; int(input(&quot;please input k:\n&quot;))</span><br><span class="line">new_ori_set &#x3D; [float(item[0]) for item in index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">centroid &#x3D; []</span><br><span class="line">if k &lt;&#x3D; 10:</span><br><span class="line">    for i in range(0,k-1):</span><br><span class="line">        centroid.append(list[i])</span><br><span class="line">else:</span><br><span class="line">    for element in list:</span><br><span class="line">        centroid.append(element)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    step &#x3D; (len(new_ori_set) - 0) &#x2F; (k-10)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # print(new_ori_set)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    temp &#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    while temp &lt; len(new_ori_set):</span><br><span class="line">        centroid.append(new_ori_set[math.trunc(temp)])</span><br><span class="line">        temp +&#x3D; step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;original centroids: &quot;, centroid, &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class_i &#x3D; [[] for i in range(len(centroid))]</span><br><span class="line">class_text &#x3D; [[] for i in range(len(centroid))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># class_i is the null class for k centroid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag &#x3D; 1</span><br><span class="line">number &#x3D; 0</span><br><span class="line">times &#x3D; 0</span><br><span class="line"># sign if k never change or this program runs more than 100 times</span><br><span class="line">while flag &#x3D;&#x3D; 1 and times &lt; 100:</span><br><span class="line">    number +&#x3D; 1</span><br><span class="line">    flag &#x3D; 0</span><br><span class="line">    times +&#x3D; 1</span><br><span class="line">    class_i &#x3D; [[] for i in range(len(centroid))]</span><br><span class="line">    class_text &#x3D; [[] for i in range(len(centroid))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # class_i is the null class for k centroid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for i in range(0, len(new_ori_set)):</span><br><span class="line">        distance &#x3D; float(&quot;inf&quot;)</span><br><span class="line">        centroid_in_choose &#x3D; 0</span><br><span class="line">        for j in range(0, len(centroid)):</span><br><span class="line">            if abs(new_ori_set[i] - centroid[j]) &lt; distance:</span><br><span class="line">                distance &#x3D; abs(new_ori_set[i] - centroid[j])</span><br><span class="line">                centroid_in_choose &#x3D; j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        class_i[centroid_in_choose].append(new_ori_set[i])</span><br><span class="line">        class_text[centroid_in_choose].append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # sort all the elements into proper class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # ------------ 每次 Clustering 之后的结果输出 ------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # print(&quot;after %sth cluster: &quot; % number, &quot;\n&quot;)</span><br><span class="line">    # print(&quot;centroid   class&quot;)</span><br><span class="line">    # for i in range(0, len(class_i)):</span><br><span class="line">    #     print(centroid[i], &#39;     &#39;, class_i[i])</span><br><span class="line">    #</span><br><span class="line">    # print(&quot;---------&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # ------------ 每次 Clustering 之后的结果输出 END ------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for i in range(0, len(class_i)):</span><br><span class="line">        sum &#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for j in range(0, len(class_i[i])):</span><br><span class="line">            sum +&#x3D; class_i[i][j]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if sum !&#x3D; 0:</span><br><span class="line">            new_centroid &#x3D; round(sum &#x2F; len(class_i[i]), 3)</span><br><span class="line">        else:</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if new_centroid !&#x3D; centroid[i]:</span><br><span class="line">            # print(&quot;change centroid &quot;, centroid[i], &quot;as &quot;, end&#x3D;&quot;&quot;)</span><br><span class="line">            centroid[i] &#x3D; new_centroid</span><br><span class="line">            # print(centroid[i])</span><br><span class="line">            flag &#x3D; 1</span><br><span class="line">            # print(&quot;---------&quot;)</span><br><span class="line">            # change the wrong centroid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------ Clustering 最终结果输出 -----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># print(&quot;THE CONCLUSION IS：&quot;)</span><br><span class="line"># print(&quot;centroid   class&quot;)</span><br><span class="line"># for i in range(0, len(class_i)):</span><br><span class="line">#     print(centroid[i], &#39;     &#39;, [text[element] for element in class_text[i]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------ Clustering 最终结果输出 END -----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># -------------- * UPPER IS CLUSTERING, CLUSTERING IS END.* --------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------ 输出到txt -------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    path &#x3D; &#39;out&#x2F;&#39;</span><br><span class="line">    f &#x3D; open(path + &quot;result.txt&quot;, &quot;w+&quot;)</span><br><span class="line">    f.write(&quot;cat\ttitle\n&quot;)</span><br><span class="line">    for i in range(0, len(class_i)):</span><br><span class="line">        for element in class_text[i]:</span><br><span class="line">            f.write(str(i) + &quot;\t&quot; + text[element] + &quot;\n&quot;)</span><br><span class="line">    f.close()</span><br><span class="line">    print(&quot;Print out %d classes successfully.&quot;%k)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;Print out to txt ERROR.&quot;)</span><br><span class="line"># ------------ 输出到txt END -------------</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-Thinking&quot;&gt;&lt;a href=&quot;#0-Thinking&quot; class=&quot;headerlink&quot; title=&quot;0. Thinking&quot;&gt;&lt;/a&gt;0. Thinking&lt;/h2&gt;&lt;h3 id=&quot;0-1-Word-List-Selection&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://zqzhao.cn/categories/Tech/"/>
    
    
      <category term="Clustering" scheme="https://zqzhao.cn/tags/Clustering/"/>
    
  </entry>
  
  <entry>
    <title>Chinese Characters Clustering</title>
    <link href="https://zqzhao.cn/2018/01/25/simple-clustering/"/>
    <id>https://zqzhao.cn/2018/01/25/simple-clustering/</id>
    <published>2018-01-25T08:47:26.000Z</published>
    <updated>2020-04-05T02:57:13.105Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">__author__ &#x3D; &#39;Zhao&#39;</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">import operator</span><br><span class="line"></span><br><span class="line">blank &#x3D; [chr(183)]</span><br><span class="line">tabs &#x3D; [&#39;&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def tree(lst):</span><br><span class="line">    l &#x3D; len(lst)</span><br><span class="line">    if l &#x3D;&#x3D; 0:</span><br><span class="line">        print(&#39;─&#39; * 3)</span><br><span class="line">    else:</span><br><span class="line">        for i, j in enumerate(lst):</span><br><span class="line">            if i !&#x3D; 0: print(tabs[0], end&#x3D;&#39;&#39;)</span><br><span class="line">            if l &#x3D;&#x3D; 1:</span><br><span class="line">                s &#x3D; &#39;─&#39; * 3</span><br><span class="line">            elif i &#x3D;&#x3D; 0:</span><br><span class="line">                s &#x3D; &#39;┬&#39; + &#39;─&#39; * 2</span><br><span class="line">            elif i + 1 &#x3D;&#x3D; l:</span><br><span class="line">                s &#x3D; &#39;└&#39; + &#39;─&#39; * 2</span><br><span class="line">            else:</span><br><span class="line">                s &#x3D; &#39;├&#39; + &#39;─&#39; * 2</span><br><span class="line">            print(s, end&#x3D;&#39;&#39;)</span><br><span class="line">            if isinstance(j, list) or isinstance(j, tuple):</span><br><span class="line">                if i + 1 &#x3D;&#x3D; l:</span><br><span class="line">                    tabs[0] +&#x3D; blank[0] * 3</span><br><span class="line">                else:</span><br><span class="line">                    tabs[0] +&#x3D; &#39;│&#39; + blank[0] * 2</span><br><span class="line">                tree(j)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot; &quot;, j)</span><br><span class="line">    tabs[0] &#x3D; tabs[0][:-3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def judge_element_delete(list_input, centroid, group, match_num):</span><br><span class="line">    for list_element in list_input:</span><br><span class="line">        if isinstance(list_element, list):</span><br><span class="line">            for element in list_element:</span><br><span class="line">                if element &#x3D;&#x3D; match_num:</span><br><span class="line">                    del centroid[list_input.index(list_element)]</span><br><span class="line">                    del group[list_input.index(list_element)]</span><br><span class="line">        else:</span><br><span class="line">            if list_element &#x3D;&#x3D; match_num:</span><br><span class="line">                del centroid[list_input.index(list_element)]</span><br><span class="line">                del group[list_input.index(list_element)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># --------------- in this part we save the list as list ---------------</span><br><span class="line">path &#x3D; &#39;&#x2F;Users&#x2F;apple&#x2F;desktop&#x2F;&#39;</span><br><span class="line">fp &#x3D; open(path + &#39;list.txt&#39;)</span><br><span class="line">ori &#x3D; fp.readlines()</span><br><span class="line"># ori is the list with out any operation</span><br><span class="line"></span><br><span class="line">copy &#x3D; []</span><br><span class="line">for x in ori:</span><br><span class="line">    x &#x3D; re.sub(r&#39;\n&#39;, &#39;&#39;, x)</span><br><span class="line">    copy.append(x)</span><br><span class="line"># in this part we change the format in a into standard format and save as copy</span><br><span class="line"></span><br><span class="line">fp.close()</span><br><span class="line"># we close the file, then we can run the list totally in this program</span><br><span class="line"></span><br><span class="line">copy.sort()</span><br><span class="line"></span><br><span class="line"># --------------- this part end ---------------</span><br><span class="line"></span><br><span class="line"># in this part we know the average length in this list is 2, thus we set step as 5.</span><br><span class="line"># In that case, we can contain at least one word.</span><br><span class="line"># totally, there are 56064 words in this list and only 56 is longer than 5.</span><br><span class="line"># In that case, 5 can be a reasonable step for this program.</span><br><span class="line"></span><br><span class="line"># sum &#x3D; 0</span><br><span class="line"># num &#x3D; 0</span><br><span class="line"># for x in copy:</span><br><span class="line">#     sum +&#x3D; len(x)</span><br><span class="line">#     num +&#x3D; 1</span><br><span class="line"># average &#x3D; (int)(sum&#x2F;num)</span><br><span class="line"># print(average, &#39; &#39;, num);</span><br><span class="line"></span><br><span class="line"># max_lenth &#x3D; 0</span><br><span class="line"># for x in copy:</span><br><span class="line">#     if max_lenth &lt; len(x):</span><br><span class="line">#         max_lenth &#x3D; len(x)</span><br><span class="line">#</span><br><span class="line"># print(max_lenth)</span><br><span class="line"></span><br><span class="line"># number &#x3D; 0</span><br><span class="line"># for x in copy:</span><br><span class="line">#     if len(x) &gt; 5:</span><br><span class="line">#         number +&#x3D; 1</span><br><span class="line">#</span><br><span class="line"># print(number)</span><br><span class="line"></span><br><span class="line"># --------------- the upper is the calculation in the preparation ---------------</span><br><span class="line"></span><br><span class="line">str_input &#x3D; input(&quot;请输入一个段落：\n&quot;)</span><br><span class="line"></span><br><span class="line">str_input &#x3D; re.sub(r&#39;,&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;，&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;\.&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;。&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;——&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;……&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;！&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;!&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;\?&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;？&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;;&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39;；&#39;, &quot;&quot;, str_input)</span><br><span class="line">str_input &#x3D; re.sub(r&#39; &#39;, &quot;&quot;, str_input)</span><br><span class="line"></span><br><span class="line"># change all the punctuation as blank, however, we may split falsely.</span><br><span class="line"># Words get around, the step can also split at wrong place, so, I do not fix this mistake.</span><br><span class="line"></span><br><span class="line">str_head &#x3D; 0</span><br><span class="line">str_tail &#x3D; len(str_input)</span><br><span class="line">ptr &#x3D; 5</span><br><span class="line">temp &#x3D; 0</span><br><span class="line">step &#x3D; 5</span><br><span class="line"></span><br><span class="line">result &#x3D; []</span><br><span class="line">ch_index &#x3D; []</span><br><span class="line"></span><br><span class="line">while temp &lt; str_tail-1:</span><br><span class="line">    flag &#x3D; 0</span><br><span class="line">    ptr &#x3D; 5</span><br><span class="line">    while flag !&#x3D; 1:</span><br><span class="line">        in_put &#x3D; str_input[temp:temp + ptr]</span><br><span class="line"></span><br><span class="line">        tail &#x3D; len(copy)</span><br><span class="line">        head &#x3D; 0</span><br><span class="line">        half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line">        while tail !&#x3D; half and head !&#x3D; half:</span><br><span class="line">            if operator.lt(copy[half], in_put):</span><br><span class="line">                # 如果字符组的一半比input小</span><br><span class="line">                head &#x3D; half</span><br><span class="line">                half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line">            elif operator.gt(copy[half], in_put):</span><br><span class="line">                # 如果字符组的一半比input大</span><br><span class="line">                tail &#x3D; half</span><br><span class="line">                half &#x3D; int((tail + head) &#x2F; 2)</span><br><span class="line"></span><br><span class="line">            else:</span><br><span class="line">                # print(in_put, end&#x3D;&#39;&#x2F;&#39;)</span><br><span class="line">                result.append(in_put)</span><br><span class="line">                ch_index.append(half)</span><br><span class="line">                flag &#x3D; 1</span><br><span class="line">                temp +&#x3D; len(in_put)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">        if ptr &#x3D;&#x3D; 0 and temp &lt;&#x3D; len(str_input)-1:</span><br><span class="line">            # print(str_input[temp], end&#x3D;&#39;&#x2F;&#39;)</span><br><span class="line">            result.append(str_input[temp])</span><br><span class="line">            ch_index.append(-1)</span><br><span class="line">            temp +&#x3D; 1</span><br><span class="line">            flag &#x3D; 1</span><br><span class="line"></span><br><span class="line">        if flag &#x3D;&#x3D; 0:</span><br><span class="line">            ptr -&#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group &#x3D; result</span><br><span class="line">centroid &#x3D; ch_index</span><br><span class="line"></span><br><span class="line"># group &#x3D; input(&quot;Please input some numbers spit as blank:\n&quot;).split(&quot; &quot;)</span><br><span class="line"># group_num &#x3D; len(group)</span><br><span class="line"></span><br><span class="line"># for element in group:</span><br><span class="line">#     centroid.append(int(element))</span><br><span class="line"></span><br><span class="line">precision &#x3D; 0</span><br><span class="line">for element in group:</span><br><span class="line">    precision &#x3D; len(element) if len(element) &gt; precision else precision</span><br><span class="line"></span><br><span class="line">group_num &#x3D; len(group)</span><br><span class="line"></span><br><span class="line">while group_num !&#x3D; 2:</span><br><span class="line">    # print(&quot;the numbers of groups now is &quot;, group_num, &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">    matrix &#x3D; [[] for i in range(group_num)]</span><br><span class="line"></span><br><span class="line">    for i in range(group_num):</span><br><span class="line">        for j in range(group_num):</span><br><span class="line">            distance &#x3D; abs(int(centroid[i]) - int(centroid[j]))</span><br><span class="line">            matrix[i].append(distance)</span><br><span class="line"></span><br><span class="line">    # --------------- matrix ---------------</span><br><span class="line"></span><br><span class="line">    # print(&quot;distance matrix :&quot;)</span><br><span class="line">    # for i in range(group_num):</span><br><span class="line">    # print(matrix[i])</span><br><span class="line">    # matrix contains the distance between every two elements</span><br><span class="line"></span><br><span class="line">    # print(&quot;------------&quot;)</span><br><span class="line"></span><br><span class="line">    max_in_matrix &#x3D; 0</span><br><span class="line"></span><br><span class="line">    for i in range(group_num):</span><br><span class="line">        for j in range(group_num):</span><br><span class="line">            max_in_matrix &#x3D; max_in_matrix if max_in_matrix &gt; matrix[i][j] else matrix[i][j]</span><br><span class="line"></span><br><span class="line">    # print(max_in_matrix)</span><br><span class="line">    # if max_in_matrix &#x3D;&#x3D; 0:</span><br><span class="line">    #     break</span><br><span class="line"></span><br><span class="line">    for i in range(group_num):</span><br><span class="line">        for j in range(group_num):</span><br><span class="line">            matrix[i][j] &#x2F;&#x3D; max_in_matrix</span><br><span class="line">            matrix[i][j] &#x3D; round(1 - matrix[i][j], precision) if round(1 - matrix[i][j], precision) !&#x3D; 1 else 0</span><br><span class="line"></span><br><span class="line">    # print(&quot;standard matrix :&quot;)</span><br><span class="line">    # for i in range(group_num):</span><br><span class="line">    #     print(matrix[i])</span><br><span class="line"></span><br><span class="line">    # print(&quot;------------&quot;)</span><br><span class="line">    # standard the matrix</span><br><span class="line"></span><br><span class="line">    similarity &#x3D; 0</span><br><span class="line">    for i in range(group_num):</span><br><span class="line">        for j in range(group_num):</span><br><span class="line">            similarity &#x3D; similarity if similarity &gt; matrix[i][j] else matrix[i][j]</span><br><span class="line"></span><br><span class="line">    # print(&quot;max similarity in the matrix: &quot;, max_in_matrix, &quot;\n&quot;)</span><br><span class="line">    # --------------- matrix ---------------</span><br><span class="line"></span><br><span class="line">    # find the max similarity in this matrix</span><br><span class="line"></span><br><span class="line">    temp_class &#x3D; []</span><br><span class="line"></span><br><span class="line">    index &#x3D; []</span><br><span class="line">    flag &#x3D; 0</span><br><span class="line"></span><br><span class="line">    for i in range(group_num):</span><br><span class="line">        for j in range(group_num):</span><br><span class="line">            if matrix[i][j] &#x3D;&#x3D; similarity:</span><br><span class="line">                index.append(i)</span><br><span class="line">                index.append(j)</span><br><span class="line">                flag &#x3D; 1</span><br><span class="line"></span><br><span class="line">                temp_class.append(group[i])</span><br><span class="line">                temp_class.append(group[j])</span><br><span class="line"></span><br><span class="line">            if flag &#x3D;&#x3D; 1:</span><br><span class="line">                break</span><br><span class="line">        if flag &#x3D;&#x3D; 1:</span><br><span class="line">            break</span><br><span class="line">    # find the first center index of new group</span><br><span class="line"></span><br><span class="line">    group_num &#x3D; len(group)</span><br><span class="line"></span><br><span class="line">    for i in range(group_num):</span><br><span class="line">        if matrix[index[0]][i] &#x3D;&#x3D; similarity and i !&#x3D; index[1]:</span><br><span class="line">            temp_class.append(group[i])</span><br><span class="line">            index.append(i)</span><br><span class="line"></span><br><span class="line">    for i in range(group_num):</span><br><span class="line">        if matrix[index[1]][i] &#x3D;&#x3D; similarity and i !&#x3D; index[0]:</span><br><span class="line">            temp_class.append(group[i])</span><br><span class="line">            index.append(i)</span><br><span class="line"></span><br><span class="line">    new_centroid &#x3D; 0</span><br><span class="line">    for element in index:</span><br><span class="line">        new_centroid +&#x3D; centroid[element]</span><br><span class="line"></span><br><span class="line">    new_centroid &#x2F;&#x3D; len(index)</span><br><span class="line"></span><br><span class="line">    for element in index:</span><br><span class="line">        group[element] &#x3D; &#39;substitute&#39;</span><br><span class="line">        centroid[element] &#x3D; &#39;substitute&#39;</span><br><span class="line"></span><br><span class="line">    lenth &#x3D; len(group)</span><br><span class="line">    temp_flag &#x3D; 0</span><br><span class="line">    while temp_flag !&#x3D; 1:</span><br><span class="line">        temp_flag &#x3D; 1</span><br><span class="line">        for i in range(0, lenth):</span><br><span class="line">            if group[i] &#x3D;&#x3D; &#39;substitute&#39;:</span><br><span class="line">                del group[i]</span><br><span class="line">                lenth &#x3D; len(group)</span><br><span class="line">                temp_flag &#x3D; 0</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    lenth &#x3D; len(centroid)</span><br><span class="line"></span><br><span class="line">    temp_flag &#x3D; 0</span><br><span class="line">    while temp_flag !&#x3D; 1:</span><br><span class="line">        temp_flag &#x3D; 1</span><br><span class="line">        for i in range(0, lenth):</span><br><span class="line">            if centroid[i] &#x3D;&#x3D; &#39;substitute&#39;:</span><br><span class="line">                del centroid[i]</span><br><span class="line">                lenth &#x3D; len(centroid)</span><br><span class="line">                temp_flag &#x3D; 0</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    group.append(temp_class)</span><br><span class="line">    centroid.append(new_centroid)</span><br><span class="line">    group_num &#x3D; len(group)</span><br><span class="line"></span><br><span class="line">print(group)</span><br><span class="line">tree(group)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://zqzhao.cn/categories/Tech/"/>
    
    
      <category term="Clustering" scheme="https://zqzhao.cn/tags/Clustering/"/>
    
  </entry>
  
  <entry>
    <title>Python 3.5 Set-Up</title>
    <link href="https://zqzhao.cn/2017/11/16/python-setting/"/>
    <id>https://zqzhao.cn/2017/11/16/python-setting/</id>
    <published>2017-11-16T08:13:09.000Z</published>
    <updated>2020-04-05T04:10:19.867Z</updated>
    
    <content type="html"><![CDATA[<ol><li>install <strong>Homebrew</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure>Jump if already installed. It’s necessary to update your homebrew to the latest version.</li></ol><ul><li>2020-04-05 Update: If you get blocked, try to fix the problem by <a href="https://www.jianshu.com/p/67db55780450" target="_blank" rel="noopener">this</a>.</li></ul><ol><li>Use Homebrew install <strong>Python3 &amp; pip3</strong> (pip is a package management tool for Python), automatically latest version, you may choose another version.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install python3</span><br></pre></td></tr></table></figure>We use pip3 because we want to use Python 3.x.x. </li><li>If you need pip simply, try<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo easy_install pip</span><br></pre></td></tr></table></figure>install pip need administrator role</li><li><p>Check the version  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$python --version</span><br><span class="line">$python3 --version</span><br><span class="line">$pip --version</span><br><span class="line">$pip3 --version</span><br></pre></td></tr></table></figure></li><li><p>Install <strong>[PyCharm</strong>](<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/</a>). I recommend community edition. If you want the professional edition, there is a <a href="http://xidea.online" target="_blank" rel="noopener">Free JetBrains Products License Server</a>.</p></li><li><p>Install additional packages:<br> For example, <strong>bs4</strong> (BeautifulSoup 4):</p><ul><li>PyCharm offer you an inner package management tool:<br>  Preferences —&gt;  Project —&gt; Project Interpreter<ul><li>Click “+” to install packages you need.</li><li>Usually there are some errors, follow its introduction and try again.</li><li>At most cases, error occurs when you revoke the administrator role.<br>  So… <code>sudo</code>please</li></ul></li><li><p>Another way is to install in the terminal:<br>  <code>$ pip3 install bs4</code></p><ul><li>if any problems, follow the introduction and try again.</li><li>Usually you need to upgrade your “pip” “homebrew” “python” or other relative package.</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;install &lt;strong&gt;Homebrew&lt;/strong&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://zqzhao.cn/categories/Tech/"/>
    
    
  </entry>
  
</feed>
